plugins {
    id 'java'
    id 'io.freefair.lombok' version '8.4'
    id 'checkstyle'
}

group = 'com.osrs.goals'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // AWS Lambda Core
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.4'
    
    // AWS SDK DynamoDB
    implementation 'software.amazon.awssdk:dynamodb:2.21.0'
    
    // Guice
    implementation 'com.google.inject:guice:7.0.0'
    implementation 'javax.inject:javax.inject:1'
    
    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    
    // Log4j2
    implementation 'org.apache.logging.log4j:log4j-core:2.22.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.22.0'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // Testing Dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'net.bytebuddy:byte-buddy:1.14.10'
    testImplementation 'net.bytebuddy:byte-buddy-agent:1.14.10'
    
    // Lombok for tests
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

testing {
    suites {
        test {
            useJUnitJupiter('5.10.1')
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '-Dnet.bytebuddy.experimental=true'
    ]
}

// Create a fat JAR with all dependencies
tasks.register('buildFatJar', Jar) {
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

// Git hooks configuration
task checkGitHooks {
    doLast {
        def projectDir = project.projectDir
        def hookFile = new File(projectDir, '.git/hooks/pre-push')
        def installScript = new File(projectDir, 'scripts/install-hooks.sh')

        if (!hookFile.exists() || !hookFile.canExecute()) {
            println "Git hooks not found or not executable. Installing them now..."

            if (!installScript.exists()) {
                throw new GradleException("Cannot find scripts/install-hooks.sh")
            }

            // Make the install script executable
            installScript.setExecutable(true)

            // Execute the install script
            def result = exec {
                workingDir projectDir
                commandLine 'sh', installScript.absolutePath
                ignoreExitValue = true
            }

            if (result.exitValue != 0) {
                throw new GradleException("Failed to install git hooks")
            }
        }
    }
}

// Checkstyle configuration
checkstyle {
    toolVersion = '10.13.0'
    config = resources.text.fromUri("https://raw.githubusercontent.com/osrsGoalsTracker/java-build-config/refs/heads/main/checkstyle/checkstyle.xml")
    maxWarnings = 0
    ignoreFailures = false
    sourceSets = [sourceSets.main, sourceSets.test]
}

// Configure Checkstyle tasks
tasks.withType(Checkstyle).configureEach {
    exclude '**/build/**'
    exclude '**/generated/**'
    exclude '**/target/**'
}

// Make Checkstyle part of the build lifecycle
tasks.named('build').configure {
    dependsOn tasks.withType(Checkstyle)
}

configurations.all {
    resolutionStrategy {
        force 'com.google.guava:guava:33.0.0-jre'
        exclude group: 'com.google.collections', module: 'google-collections'
    }
}

// Make build task depend on checkGitHooks
build.dependsOn checkGitHooks
